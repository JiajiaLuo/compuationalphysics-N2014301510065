import pylab as pl
import math
class cannon:
    def __init__(self,time_step=0.1,v0=700,theta=10,g=9.8,bm=4e-5,T=200,a=6.5e-3,c=2.5):
# unit of v0 is m/s
        self.theta=theta*math.pi/180
        self.t = [0]
        self.vx =[v0*math.cos(self.theta)]
        self.vy =[v0*math.sin(self.theta)]
        self.dt = time_step
        self.v=[v0]
        self.x=[0]
        self.y=[0]
        self.g=g
        self.bm=bm
        self.T=T
        self.a=a
        self.c=c
    def cannon_freedom(self):
        _time=0
        while (self.y[-1]>=0):
            self.vx.append(self.vx[-1])
            self.vy.append(self.vy[-1]-self.g*self.dt)
            self.x.append(self.x[-1]+self.vx[-1]*self.dt)
            self.y.append(self.y[-1]+self.vy[-1]*self.dt)
            self.v.append(math.sqrt(self.vx[-1]*self.vx[-1]+self.vy[-1]*self.vy[-1]))
            self.t.append(_time)
            _time += self.dt
        r=-self.y[-2]/self.y[-1]
        self.x[-1]=(self.x[-2]+r*self.x[-1])/(r+1)
        self.y[-1]=0
    def show_results(self,color):
        pl.plot(self.x, self.y,label='theta='+str(self.theta*180/math.pi))
        pl.title('no air')
        pl.xlabel('x/km')
        pl.ylabel('y/km')
        pl.legend(loc='best',prop={'size':14})
a=cannon()
a.cannon_freedom()
a.show_results('r')
a=cannon(time_step=0.1,v0=700,theta=20,g=9.8,bm=4e-5,T=200,a=6.5e-3,c=2.5)
a.cannon_freedom()
a.show_results('r')
a=cannon(time_step=0.1,v0=700,theta=30,g=9.8,bm=4e-5,T=200,a=6.5e-3,c=2.5)
a.cannon_freedom()
a.show_results('r')
a=cannon(time_step=0.1,v0=700,theta=45,g=9.8,bm=4e-5,T=200,a=6.5e-3,c=2.5)
a.cannon_freedom()
a.show_results('r')
a=cannon(time_step=0.1,v0=700,theta=50,g=9.8,bm=4e-5,T=200,a=6.5e-3,c=2.5)
a.cannon_freedom()
a.show_results('r')
a=cannon(time_step=0.1,v0=700,theta=60,g=9.8,bm=4e-5,T=200,a=6.5e-3,c=2.5)
a.cannon_freedom()
a.show_results('r')
a=cannon(time_step=0.1,v0=700,theta=70,g=9.8,bm=4e-5,T=200,a=6.5e-3,c=2.5)
a.cannon_freedom()
a.show_results('r')
pl.show()
class cannon_air_no_density(cannon):
    def cannon_nodensity(self):
        _time=0
        while (self.y[-1]>=0):
            self.vx.append(self.vx[-1]-self.bm*self.dt*self.v[-1]*self.vx[-1])
            self.vy.append(self.vy[-1]-self.g*self.dt-self.bm*self.dt*self.v[-1]*self.vy[-1])
            self.x.append(self.x[-1]+self.vx[-1]*self.dt)
            self.y.append(self.y[-1]+self.vy[-1]*self.dt)
            self.v.append(math.sqrt(self.vx[-1]*self.vx[-1]+self.vy[-1]*self.vy[-1]))
            self.t.append(_time)
            _time += self.dt
        r=-self.y[-2]/self.y[-1]
        self.x[-1]=(self.x[-2]+r*self.x[-1])/(r+1)
        self.y[-1]=0
    def show_results(self,color):
        pl.plot(self.x, self.y,label='theta='+str(self.theta*180/math.pi))
        pl.title('no air density')
        pl.xlabel('x/km')
        pl.ylabel('y/km')
        pl.legend(loc='best',prop={'size':14})
import pylab as pl
a=cannon_air_no_density()
a.cannon_nodensity()
a.show_results('b')
a=cannon_air_no_density(time_step=0.1,v0=700,theta=20,g=9.8,bm=4e-5,T=200,a=6.5e-3,c=2.5)
a.cannon_nodensity()
a.show_results('b')
a=cannon_air_no_density(time_step=0.1,v0=700,theta=30,g=9.8,bm=4e-5,T=200,a=6.5e-3,c=2.5)
a.cannon_nodensity()
a.show_results('b')
a=cannon_air_no_density(time_step=0.1,v0=700,theta=45,g=9.8,bm=4e-5,T=200,a=6.5e-3,c=2.5)
a.cannon_nodensity()
a.show_results('b')
a=cannon_air_no_density(time_step=0.1,v0=700,theta=50,g=9.8,bm=4e-5,T=200,a=6.5e-3,c=2.5)
a.cannon_nodensity()
a.show_results('b')
a=cannon_air_no_density(time_step=0.1,v0=700,theta=60,g=9.8,bm=4e-5,T=200,a=6.5e-3,c=2.5)
a.cannon_nodensity()
a.show_results('b')
a=cannon_air_no_density(time_step=0.1,v0=700,theta=70,g=9.8,bm=4e-5,T=200,a=6.5e-3,c=2.5)
a.cannon_nodensity()
a.show_results('b')
pl.show()

class cannon_air_density(cannon):
    def cannon_adiabatic(self):
        _time=0
        while (self.y[-1]>=0):
            self.vx.append(self.vx[-1]-self.bm*self.dt*self.v[-1]*self.vx[-1]*(1-self.a*self.y[-1]/self.T)**self.c)
            self.vy.append(self.vy[-1]-self.g*self.dt-self.bm*self.dt*self.v[-1]*self.vy[-1]*(1-self.a*self.y[-1]/self.T)**self.c)
            self.x.append(self.x[-1]+self.vx[-1]*self.dt)
            self.y.append(self.y[-1]+self.vy[-1]*self.dt)
            self.v.append(math.sqrt(self.vx[-1]*self.vx[-1]+self.vy[-1]*self.vy[-1]))
            self.t.append(_time)
            _time += self.dt
        r=-self.y[-2]/self.y[-1]
        self.x[-1]=(self.x[-2]+r*self.x[-1])/(r+1)
        self.y[-1]=0
    def show_results(self,color):
        pl.plot(self.x, self.y,label='theta='+str(self.theta*180/math.pi))
        pl.title('Cannon shell trajectory of  air density')
        pl.xlabel('x/km')
        pl.ylabel('y/km')
        pl.legend(loc='best',prop={'size':14})
import pylab as pl
a=cannon_air_density()
a.cannon_adiabatic()
a.show_results('g')
a=cannon_air_density(time_step=0.1,v0=700,theta=20,g=9.8,bm=4e-5,T=200,a=6.5e-3,c=2.5)
a.cannon_adiabatic()
a.show_results('g')
a=cannon_air_density(time_step=0.1,v0=700,theta=30,g=9.8,bm=4e-5,T=200,a=6.5e-3,c=2.5)
a.cannon_adiabatic()
a.show_results('b')
a=cannon_air_density(time_step=0.1,v0=700,theta=45,g=9.8,bm=4e-5,T=200,a=6.5e-3,c=2.5)
a.cannon_adiabatic()
a.show_results('b')
a=cannon_air_density(time_step=0.1,v0=700,theta=50,g=9.8,bm=4e-5,T=200,a=6.5e-3,c=2.5)
a.cannon_adiabatic()
a.show_results('b')
a=cannon_air_density(time_step=0.1,v0=700,theta=60,g=9.8,bm=4e-5,T=200,a=6.5e-3,c=2.5)
a.cannon_adiabatic()
a.show_results('b')
a=cannon_air_density(time_step=0.1,v0=700,theta=70,g=9.8,bm=4e-5,T=200,a=6.5e-3,c=2.5)
a.cannon_adiabatic()
a.show_results('b')
pl.show()
class differ(cannon):
    def cannon_freedom(self):
        _time=0
        while (self.y[-1]>=0):
            self.vx.append(self.vx[-1])
            self.vy.append(self.vy[-1]-self.g*self.dt)
            self.x.append(self.x[-1]+self.vx[-1]*self.dt)
            self.y.append(self.y[-1]+self.vy[-1]*self.dt)
            self.v.append(math.sqrt(self.vx[-1]*self.vx[-1]+self.vy[-1]*self.vy[-1]))
            self.t.append(_time)
            _time += self.dt
        r=-self.y[-2]/self.y[-1]
        self.x[-1]=(self.x[-2]+r*self.x[-1])/(r+1)
        self.y[-1]=0
    def cannon_adiabatic(self):
        _time=0
        while (self.y[-1]>=0):
            self.vx.append(self.vx[-1]-self.bm*self.dt*self.v[-1]*self.vx[-1]*(1-self.a*self.y[-1]/self.T)**self.c)
            self.vy.append(self.vy[-1]-self.g*self.dt-self.bm*self.dt*self.v[-1]*self.vy[-1]*(1-self.a*self.y[-1]/self.T)**self.c)
            self.x.append(self.x[-1]+self.vx[-1]*self.dt)
            self.y.append(self.y[-1]+self.vy[-1]*self.dt)
            self.v.append(math.sqrt(self.vx[-1]*self.vx[-1]+self.vy[-1]*self.vy[-1]))
            self.t.append(_time)
            _time += self.dt
        r=-self.y[-2]/self.y[-1]
        self.x[-1]=(self.x[-2]+r*self.x[-1])/(r+1)
        self.y[-1]=0
    def show_results(self,color):
        pl.plot(self.x, self.y,label='theta='+str(self.theta*180/math.pi))
        pl.title('no air and air density')
        pl.xlabel('x/km')
        pl.ylabel('y/km')
        pl.legend(loc='best',prop={'size':14})
import pylab as pl
a=differ(time_step=0.1,v0=700,theta=30,g=9.8,bm=4e-5,T=200,a=6.5e-3,c=2.5)
a.cannon_freedom()
a.show_results('d')
a=differ(time_step=0.1,v0=700,theta=45,g=9.8,bm=4e-5,T=200,a=6.5e-3,c=2.5)
a.cannon_freedom()
a.show_results('d')
a=differ(time_step=0.1,v0=700,theta=30,g=9.8,bm=4e-5,T=200,a=6.5e-3,c=2.5)
a.cannon_adiabatic()
a.show_results('d')
a=differ(time_step=0.1,v0=700,theta=45,g=9.8,bm=4e-5,T=200,a=6.5e-3,c=2.5)
a.cannon_adiabatic()
a.show_results('d')
pl.show()

c
